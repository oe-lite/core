## Class for compiling linux kernels.
##
## Compiles linux kernels using a lot of different options. It is possible to
## build the build the linux kernel with initramfs included and additionally
## set the compression of the ramdisk image using the kernel_initramfs,
## and ramdisk_image_compression USE flags. For other options when compiling,
## see the list below of useflags and variables.
##
## @useflag kernel_imagetype Imagetype of the kernel. Set to zImage by default.
## @useflag kernel_maxsize Maximum size allowed of the kernel. Uses if the
##          sizecheck USE flag is set by sizecheck class.
## @useflag kernel_defconfig Use defconfig from within the kernel. This
##          USE flag contains the name of the defconfig to use.
## @useflag kernel_initramfs Enable or disable initramfs. If set, uses
##          DEPENDS_KERNEL_INITRAMFS to acquire the initramfs.
## @useflag ramdisk_image_compression Compression of the ramdisk image. Set to
##          none by default.
## @useflag kernel_external_dtb Filename of a (already compiled) Device tree
##          binary (dtb) to be installed into boot directory. The file should
##          be added to SRC_URI="files://". kernel_dts makes this flag
##          unnecessary.
## @useflag kernel_dtc Whether to use the device tree compiler (dtc) from the
##          kernel source tree being built. If not set, dtc from oe-lite recipe
##          will be used.
## @useflag kernel_dtc_flags Flags for the device tree compiler (dtc).
## @useflag kernel_dts Name of the Device tree source (dts) to be compiled.
##          Example 'imx6sabresd.dts'
##          A kernel make target of the same file name but .dtb as extension is
##          used to build the DTB file.
##          The default kernel directory with dts files is:
##          arch/${KERNEL_ARCH}/boot/dts/ but it's possible to override it
##          using USE_kernel_dts_dir
##          If this flag is just set to "1", '${MACHINE}.dts' will be used.
## @useflag kernel_dts_dir Non-default directory with device tree source files.
##
## @var DEPENDS_KERNEL_INITRAMFS Set to the name of the package providing the
##      initramfs.
## @var KERNEL_IMAGE Location of the compiled kernel.
## @var KERNEL_IMAGE_FILENAME Name of the compiled kernel.
## @var KERNEL_IMAGE_DEPLOY_NAME Name of the deployed kernel. Used in
##      KERNEL_IMAGE_DEPLOY_FILE and in KERNEL_IMAGE_DEPLOY_LINK.
## @var KERNEL_IMAGE_DEPLOY_EXT Extention of the deployed kernel.
## @var KERNEL_IMAGE_DEPLOY_FILE The full filename of the deployed kernel.
## @var KERNEL_IMAGE_DEPLOY_LINK The link name of the symlink to
##      KERNEL_IMAGE_DEPLOY_FILE.
## @var KERNEL_DTB_DIR Location of the compiled devicetree.
## @var KERNEL_DTB_VENDOR Vendor subdir of the compiled devicetree.
## @var KERNEL_DTB_FILE Name of the compiled devicetree
## @var KERNEL_DTB_DEPLOY_NAME name of the deployed devicetree. Used in
##      KERNEL_DTB_DEPLOY_FILE and in
##      KERNEL_DTB_DEPLOY_LINK.
## @var KERNEL_DTB_DEPLOY_EXT Extention of the deployed device tree binary.

DESCRIPTION ?= "Linux kernel"
LICENSE ?= "GPL"

RECIPE_TYPES = "machine"
COMPATIBLE_MACHINES = ".*"

require conf/kernel.conf

inherit kernel-common kernel-modules-strip

EXTRA_OEMAKE += "CROSS_COMPILE=${TARGET_PREFIX}"

# Kernel defconfig can be provided in 3 different ways:
#
# Use defconfig file from SRC_URI (this is default)
#  + Set USE_kernel_defconfig to "file"
#
# Use defconfig from kernel source
#  + Set USE_kernel_defconfig to "blahblah_defconfig"
#
# Use defconfig file from DEPENDS (kernel-defconfig)
#  + USE_kernel_defconfig not set
#
CLASS_FLAGS += "kernel_defconfig"
DEFAULT_USE_kernel_defconfig = "file"
CLASS_DEPENDS += "${DEPENDS_DEFCONFIG}"
DEPENDS_DEFCONFIG = "kernel-defconfig"
DEPENDS_DEFCONFIG:USE_kernel_defconfig = ""

DEFCONFIG_FILE ?= "${SRCDIR}/defconfig"
DEFCONFIG = "${USE_kernel_defconfig}"
DEFCONFIG[expand] = 3

CLASS_FLAGS += "kernel_initramfs"
DEPENDS_KERNEL_INITRAMFS ?= "initramfs"
CLASS_DEPENDS:>USE_kernel_initramfs = " ${DEPENDS_KERNEL_INITRAMFS}"
KERNEL_INITRAMFS ?= "${MACHINE_SYSROOT}${bootdir}/initramfs.cpio"
USE_KERNEL_INITRAMFS = "${USE_kernel_initramfs}"
USE_KERNEL_INITRAMFS[expand] = "3"

CLASS_FLAGS += "ramdisk_image_compression"
DEFAULT_USE_ramdisk_image_compression = "none"

do_configure_kernel () {
    if [ "${DEFCONFIG}" = "file" ] ; then
        cp ${DEFCONFIG_FILE} ${S}/.config
        yes '' | oe_runmake oldconfig
    elif [ -n "${DEFCONFIG}" ] ; then
        oe_runmake ${DEFCONFIG}
    elif [ -e "${HOST_SYSROOT}/kernel_defconfig" ] ; then
        cp ${HOST_SYSROOT}/kernel_defconfig ${S}/.config
        yes '' | oe_runmake oldconfig
    else
        die "No default configuration available"
    fi
    if [ -n "${USE_KERNEL_INITRAMFS}" ] ; then
        ./scripts/config --enable CONFIG_BLK_DEV_INITRD
        ./scripts/config --set-str CONFIG_INITRAMFS_SOURCE "${KERNEL_INITRAMFS}"
        case "${USE_ramdisk_image_compression}" in
            gzip)
                ./scripts/config --enable CONFIG_RD_GZIP
                ./scripts/config --enable CONFIG_INITRAMFS_COMPRESSION_GZIP
                ;;
            lzma)
                ./scripts/config --enable CONFIG_RD_LZMA
                ./scripts/config --enable CONFIG_INITRAMFS_COMPRESSION_LZMA
                ;;
            xz)
                ./scripts/config --enable CONFIG_RD_XZ
                ./scripts/config --enable CONFIG_INITRAMFS_COMPRESSION_XZ
                ;;
            lzo)
                ./scripts/config --enable CONFIG_RD_LZO
                ./scripts/config --enable CONFIG_INITRAMFS_COMPRESSION_LZO
                ;;
            lz4)
                ./scripts/config --enable CONFIG_RD_LZ4
                ./scripts/config --enable CONFIG_INITRAMFS_COMPRESSION_LZ4
                ;;
            *)
                ;;
        esac
        yes '' | oe_runmake oldconfig
    fi
}

do_configure () {
    do_configure_kernel
}

export BUILD_TAG

export HOSTCFLAGS   = "${BUILD_CFLAGS}"
export HOSTCPPFLAGS = "${BUILD_CPPFLAGS}"
export HOSTLDFLAGS  = "${BUILD_LDFLAGS}"

CLASS_DEPENDS:>BUILD_KERNEL_darwin += "build:libelf"

do_compile_kernel () {
    if [ -n "$BUILD_TAG" ]; then
        export KBUILD_BUILD_VERSION="$BUILD_TAG"
    fi

    if [ `grep "^VERSION =" Makefile | cut -d'=' -f2` -le 3 -a \
         `grep "^PATCHLEVEL =" Makefile | cut -d'=' -f2` -le 6 ]; then
        oe_runmake include/linux/version.h
    else
        oe_runmake include/generated/uapi/linux/version.h
    fi
    LOADADDR_ARG=""
    if [ "${USE_kernel_imagetype}" = "uImage" ] ; then
        if [ -n "$USE_kernel_uimage_loadaddress" ] ; then
            LOADADDR="$USE_kernel_uimage_loadaddress"
        elif [ -n "$USE_kernel_uimage_entrypoint" ] ; then
            LOADADDR="$USE_kernel_uimage_entrypoint"
        else
            oe_runmake vmlinux
            for symbol in ${UIMAGE_ENTRYPOINT_SYMBOL} ; do
                LOADADDR=`${HOST_PREFIX}nm ${S}/vmlinux | \
                          awk '$3=="'"$symbol"'" {print $1}'`
                if [ -n "$LOADADDR" ] ; then
                    break
                fi
            done
        fi
        LOADADDR_ARG="LOADADDR=$LOADADDR"
    fi

    oe_runmake ${USE_kernel_imagetype} ${EXTRA_OEMAKE_COMPILE} $LOADADDR_ARG

    if (grep -q -i -e '^CONFIG_MODULES=y$' .config); then
        oe_runmake modules
    else
        oenote "no modules to compile"
    fi

    # Check if scripts/genksyms exists and if so, build it
    if [ -e scripts/genksyms/ ]; then
        oe_runmake SUBDIRS="scripts/genksyms"
    fi
}

do_compile[postfuncs] += "${KERNEL_COMPILE_POSTFUNCS}"
KERNEL_COMPILE_POSTFUNCS = ""
do_compile () {
    do_compile_kernel
}

CLASS_DEPENDS += "${KERNEL_UIMAGE_DEPENDS}"
KERNEL_UIMAGE_DEPENDS = "${@['', 'native:util/mkimage']['${USE_kernel_imagetype}'.startswith('uImage')]}"

CLASS_FLAGS += "kernel_uimage \
    kernel_uimage_entrypoint kernel_uimage_loadaddress kernel_uimage_name"
KERNEL_UIMAGE_DEPENDS:USE_kernel_uimage = "native:util/mkimage"
DEFAULT_USE_kernel_uimage = False
DEFAULT_USE_kernel_uimage_name = "${DISTRO}/${PV}/${MACHINE}"

KERNEL_COMPILE_POSTFUNCS:>USE_kernel_uimage = " do_compile_kernel_uimage"
UIMAGE_ENTRYPOINT_SYMBOL ?= "_start _text"
export USE_kernel_uimage_loadaddress
export USE_kernel_uimage_entrypoint
do_compile_kernel_uimage() {
    if [ -n "$USE_kernel_uimage_entrypoint" ] ; then
        ENTRYPOINT="$USE_kernel_uimage_entrypoint"
    else
        for symbol in ${UIMAGE_ENTRYPOINT_SYMBOL} ; do
            ENTRYPOINT=`${HOST_PREFIX}nm ${S}/vmlinux | \
                awk '$3=="'"$symbol"'" {print $1}'`
            if [ -n "$ENTRYPOINT" ] ; then
                break
            fi
        done
    fi
    if [ -n "$USE_kernel_uimage_loadaddress" ] ; then
        LOADADDRESS="$USE_kernel_uimage_loadaddress"
    else
        LOADADDRESS="$ENTRYPOINT"
    fi

    if [ -e "arch/${KERNEL_ARCH}/boot/compressed/vmlinux" ] ; then
        ${OBJCOPY} -O binary -R .note -R .comment \
        -S arch/${KERNEL_ARCH}/boot/compressed/vmlinux linux.bin
        mkimage -A ${UBOOT_ARCH} -O linux -T kernel -C none \
        -a $LOADADDRESS \
        -e $ENTRYPOINT \
        -n "${USE_kernel_uimage_name}" \
        -d linux.bin arch/${KERNEL_ARCH}/boot/uImage
        rm -f linux.bin

    else
        ${OBJCOPY} -O binary -R .note -R .comment -S vmlinux linux.bin
        rm -f linux.bin.gz
        gzip -9 linux.bin
        mkdir -p arch/${KERNEL_ARCH}/boot
        mkimage -A ${UBOOT_ARCH} -O linux -T kernel -C gzip \
        -a $LOADADDRESS \
        -e $ENTRYPOINT \
        -n "${USE_kernel_uimage_name}" \
        -d linux.bin.gz arch/${KERNEL_ARCH}/boot/uImage
        rm -f linux.bin.gz
    fi
}

UIMAGE_KERNEL_OUTPUT = ""
UIMAGE_KERNEL_OUTPUT:USE_kernel_uimage = "arch/${KERNEL_ARCH}/boot/uImage"
KERNEL_OUTPUT += "${UIMAGE_KERNEL_OUTPUT}"

CLASS_FLAGS += "kernel_external_dtb kernel_dtc kernel_dtc_flags kernel_dts_vendor kernel_dts kernel_dts_dir"
DEFAULT_USE_kernel_dtc_flags = "-R 8 -p 0x3000"

KERNEL_DTS_DIR = "arch/${KERNEL_ARCH}/boot/dts/"
KERNEL_DTS_DIR:USE_kernel_dts_dir = "${USE_kernel_dts_dir}"
KERNEL_DTS_FILE = "${MACHINE}.dts"
KERNEL_DTS_NAME = "${MACHINE}"
KERNEL_DTB_VENDOR = ""
KERNEL_DTB_FILE = ""

addhook kernel_devicetree_init to post_recipe_parse after set_useflags
def kernel_devicetree_init(d):
    kernel_dtb = d.get('USE_kernel_external_dtb')
    kernel_dts_vendor = d.get('USE_kernel_dts_vendor')
    kernel_dts = d.get('USE_kernel_dts')
    if (kernel_dts and kernel_dts != "1"):
        if(kernel_dtb):
            import bb
            bb.oefatal("ERROR: setting both USE_kernel_external_dtb"+
            " and USE_kernel_dts makes no sense")
        dts_name,ext = os.path.splitext(kernel_dts)
        d.set('KERNEL_DTS_FILE', kernel_dts)
        if (kernel_dts_vendor and kernel_dts_vendor != "1"):
            d.set('KERNEL_DTB_VENDOR', kernel_dts_vendor+'/')
        d.set('KERNEL_DTB_FILE',dts_name+'.dtb')
        d.set('KERNEL_DTS_NAME',dts_name)
        d.set('KERNEL_DTB_TARGET',dts_name)
    elif (kernel_dts and kernel_dts == "1"):
        d.set('KERNEL_DTB_FILE',d.get('KERNEL_DTS_NAME')+'.dtb')
    elif (kernel_dtb):
        d.set('KERNEL_DTB_FILE',kernel_dtb)

#this should only be used when also specifying a .dts
DTCFUNC = ""
DTCFUNC:>USE_kernel_dts = " do_compile_kernel_dtc"
KERNEL_COMPILE_POSTFUNCS:>USE_kernel_dtc += " ${DTCFUNC}"
do_compile_kernel_dtc() {
    scripts/dtc/dtc -I dts -O dtb ${USE_kernel_dtc_flags} \
        -o ${KERNEL_DTS_DIR}/${KERNEL_DTB_FILE} ${KERNEL_DTS_FILE}
}

KERNEL_COMPILE_POSTFUNCS:>USE_kernel_dts += " do_compile_kernel_dts"
do_compile_kernel_dts() {
    oe_runmake "${KERNEL_DTB_VENDOR}${KERNEL_DTB_FILE}"
}

KERNEL_COMPILE_POSTFUNCS:>USE_kernel_external_dtb += " do_compile_kernel_external_dtb"
do_compile_kernel_external_dtb() {
    cp ${SRCDIR}/${KERNEL_DTB_FILE} ${S}/${KERNEL_DTS_DIR}/${KERNEL_DTB_VENDOR}${KERNEL_DTB_FILE}
}

CLASS_FLAGS += "kernel_perf"
DEPENDS:>USE_kernel_perf += " libpthread librt libm libdl"
DO_INSTALL_PERF = ""
DO_INSTALL_PERF:USE_kernel_perf = "do_install_perf"
EXTRA_OEMAKE_PERF ?= ""
do_install[postfuncs] += "${DO_INSTALL_PERF}"
do_install_perf () {
        oe_runmake -C ${S}/tools/perf install DESTDIR=${D} \
                prefix=${prefix} \
                bindir=${bindir} \
                ${EXTRA_OEMAKE_PERF}
}
PACKAGES:>USE_kernel_perf += " ${PN}-perf ${PN}-perf-doc ${PN}-perf-scripts"
FILES_${PN}-perf = "${bindir}/perf ${bindir}/trace \
        ${sysconfdir}/bash_completion.d/perf"
DEPENDS_${PN}-perf += "libpthread librt libm libgcc-s libc libdl"
RDEPENDS_${PN}-perf += "libpthread librt libm libgcc-s libc libdl"
PROVIDES_${PN}-perf += "util/perf"
FILES_${PN}-perf-doc = "${mandir}/man1/perf*"
FILES_${PN}-perf-doc += "${docdir}/perf-tip/*"
FILES_${PN}-perf-scripts = "${prefix}/libexec/perf-core"

CLASS_FLAGS += "kernel_trace"
PACKAGES:>USE_kernel_trace += " ${PN}-trace"
FILES_${PN}-trace = "${libdir}/traceevent/*"
DEPENDS_${PN}-trace += "libc"
RDEPENDS_${PN}_trace += "libc"

do_install_kernel () {
    install -d ${D}${bootdir}
    install -m 0644 ${KERNEL_IMAGE} ${D}${bootdir}/${KERNEL_IMAGE_FILENAME}

    if [ -n "${KERNEL_DTB_FILE}" ] ; then
        install -m 0644 ${KERNEL_DTS_DIR}/${KERNEL_DTB_VENDOR}${KERNEL_DTB_FILE} ${D}${bootdir}/${KERNEL_DTB_FILENAME}
    fi

    if (grep -q -i -e '^CONFIG_MODULES=y$' .config); then
        oe_runmake DEPMOD=echo INSTALL_MOD_PATH="${D}" modules_install
        rm ${D}/lib/modules/*/build ${D}/lib/modules/*/source
    else
        oenote "no modules to install"
    fi

    for kernel_output in ${KERNEL_OUTPUT} ; do
        install -m 0644 $kernel_output ${D}${bootdir}/
    done
    install -m 0644 .config ${D}${bootdir}/config

    install -d ${D}${kernelsrcdir}
    for dir in scripts include ; do
        cp -fR $dir ${D}${kernelsrcdir}/
    done
    for file in Makefile .config Module.symvers System.map ; do
        cp -f $file ${D}${kernelsrcdir}
    done
    for file in localversion-rt ; do
        test -e $file && cp -f $file ${D}${kernelsrcdir}
    done
    mkdir -p ${D}${kernelsrcdir}/arch/${KERNEL_ARCH}
    cp -fR arch/${KERNEL_ARCH}/lib ${D}${kernelsrcdir}/arch/${KERNEL_ARCH}
    cp -fR arch/${KERNEL_ARCH}/include ${D}${kernelsrcdir}/arch/${KERNEL_ARCH}
    cp -fR arch/${KERNEL_ARCH}/Makefile* ${D}${kernelsrcdir}/arch/${KERNEL_ARCH}
    for d in arch/${KERNEL_ARCH}/mach-*/include ; do
        if [ "$d" = "arch/${KERNEL_ARCH}/mach-*/include" ] ; then
            continue
        fi
        machdir=`dirname $d`
        mkdir -p ${D}${kernelsrcdir}/$machdir
        cp -fR $d ${D}${kernelsrcdir}/$machdir/
    done
    find ${D}${kernelsrcdir}/ \( -name \*.o -o -name .\*.cmd \) -delete
}

do_install () {
    do_install_kernel
}

PACKAGES = "${PN} ${PN}-vmlinux ${PN}-dev ${PN}-modules ${PN}-dtb ${PN}-firmware"

FILES_${PN} = "${bootdir}/${KERNEL_IMAGE_FILENAME}"
FILES_${PN}:USE_kernel_uimage = "${bootdir}/uImage"
FILES_${PN}-dtb = "${bootdir}/${KERNEL_DTB_FILE} ${bootdir}/${KERNEL_DTB_FILENAME}"
FILES_${PN}-vmlinux = "${bootdir}/vmlinux"
FILES_${PN}-dev = "${bootdir}/System.map ${bootdir}/Module.symvers \
    ${bootdir}/config ${kernelsrcdir}"

FILES_${PN}-modules = "/lib/modules"
FILES_${PN}-firmware = "/lib/firmware"

PROVIDES_${PN} = "kernel"
PROVIDES_${PN}-modules = "kernel-modules"
PROVIDES_${PN}-dev = "kernel-dev"

DEPENDS_${PN}-dev = ""

# FIXME: implement auto-package-kernel-modules.oeclass to split out
# modules into separate packages

# Support checking the kernel size since some kernels need to reside
# in partitions with a fixed length or there is a limit in
# transferring the kernel to memory
inherit sizecheck
KERNEL_SIZECHECK = ""
KERNEL_SIZECHECK:USE_kernel_maxsize = "${KERNEL_IMAGE}:${USE_kernel_maxsize}"
SIZECHECK += "${KERNEL_SIZECHECK}"

addtask deploy after install before build
do_deploy[dirs] = "${IMAGE_DEPLOY_DIR} ${S}"
REBUILD ?= "1"

KERNEL_DTB_DEPLOY_FILE = "${KERNEL_DTB_FILE}"
do_deploy() {
    install -m 0644 ${KERNEL_IMAGE} \
        ${IMAGE_DEPLOY_DIR}/${KERNEL_IMAGE_DEPLOY_FILE}
    md5sum <${KERNEL_IMAGE} \
        >${IMAGE_DEPLOY_DIR}/${KERNEL_IMAGE_DEPLOY_FILE}.md5

    if [ -n "${KERNEL_DTB_FILE}" ] ; then
        install -m 0644 "${KERNEL_DTS_DIR}/${KERNEL_DTB_VENDOR}${KERNEL_DTB_FILE}" \
            ${IMAGE_DEPLOY_DIR}/${KERNEL_DTB_DEPLOY_FILE}
        md5sum <"${KERNEL_DTS_DIR}/${KERNEL_DTB_VENDOR}${KERNEL_DTB_FILE}" \
            >${IMAGE_DEPLOY_DIR}/${KERNEL_DTB_DEPLOY_FILE}.md5
    fi

    cd ${IMAGE_DEPLOY_DIR}
    if [ -n "${KERNEL_IMAGE_DEPLOY_LINK}" ] ; then
        for ext in "" ".md5"; do
            rm -f  ${KERNEL_IMAGE_DEPLOY_LINK}$ext
            ln -sf ${KERNEL_IMAGE_DEPLOY_FILE}$ext \
                   ${KERNEL_IMAGE_DEPLOY_LINK}$ext
        done
    fi
    if [ -n "${KERNEL_DTB_FILE}" -a \
         -n "${KERNEL_DTB_DEPLOY_LINK}" ] ; then
        for ext in "" ".md5"; do
            rm -f  ${KERNEL_DTB_DEPLOY_LINK}$ext
            ln -sf ${KERNEL_DTB_DEPLOY_FILE}$ext \
                   ${KERNEL_DTB_DEPLOY_LINK}$ext
        done
    fi
}

# Local Variables:
# mode: python
# End:
